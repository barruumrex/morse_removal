defmodule Morse do
  @moduledoc
  @codes %{
    ?A => "*-", ?B => "-***", ?C => "-*-*", ?D => "-**", ?E => "*", ?Ã‰ => "**-**", ?F => "**-*", ?G => "--*",
    ?H => "****", ?I => "**", ?J => "*---", ?K => "-*-", ?L => "*-**", ?M => "--", ?N => "-*", ?O => "---",
    ?P => "*--*", ?Q => "--*-", ?R => "*-*", ?S => "***", ?T => "-", ?U => "**-", ?V => "***-", ?W => "*--",
    ?X => "-**-", ?Y => "-*--", ?Z => "--**", ?\s => "_", ?0 => "*----", ?1 => "**---", ?2 => "***--",
    ?3 => "****-", ?4 => "*****", ?5 => "-****", ?6 => "--***", ?7 => "---**", ?8 => "----*", ?9 => "-----",
    ?. => "*-*-*-", ?, => "--**--", ?: => "---***", ?? => "**--**", ?' => "*----*", ?- => "-****-", ?/ => "-**-*",
    ?( => "-*--*", ?) => "-*--*-", ?" => ".-..-.", ?= => "-***-", ?+ => "*-*-*", ?* => "-**-", ?@ => "*--*-*"
  }


  def encode(string), do: string |> String.upcase |> to_char_list |> Enum.reduce("", &do_encode/2) |> to_char_list

  defp do_encode(char,"" ) do get_code(char) end
  defp do_encode(char,acc ) do acc <> "_" <> get_code(char) end

  defp get_code(letter), do: Map.get(@codes, letter)
end
